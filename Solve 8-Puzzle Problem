from collections import deque

goal_state = ['1','2','3','4','5','6','7','8','0']

def get_neighbors(state):
    neighbors = []
    i = state.index('0')
    row, col = divmod(i, 3)
    directions = [(-1,0), (1,0), (0,-1), (0,1)]
    for dx, dy in directions:
        new_row, new_col = row + dx, col + dy
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            ni = new_row * 3 + new_col
            new_state = state[:]
            new_state[i], new_state[ni] = new_state[ni], new_state[i]
            neighbors.append(new_state)
    return neighbors

def bfs(start):
    visited = set()
    queue = deque([(start, [])])
    while queue:
        state, path = queue.popleft()
        if state == goal_state:
            return path + [state]
        visited.add(tuple(state))
        for neighbor in get_neighbors(state):
            if tuple(neighbor) not in visited:
                queue.append((neighbor, path + [state]))
    return None

# Input start state
start_state = ['1','2','3','4','0','5','6','7','8']
solution = bfs(start_state)

if solution:
    print("\nSteps to solve 8-puzzle:")
    for step in solution:
        print(step[0:3])
        print(step[3:6])
        print(step[6:], "\n")
else:
    print("No solution found.")
